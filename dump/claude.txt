Hey, so I you might not know about the fact that there are dual screen asus laptops, and there is this so called asus-wmi-screenpad kernel module which is open source, unlike the folks at asus with theirs, and community created, and you can add it to your linux machine and use your second screen with controllable brightness and it's great.

Now the thing is, for nix, this module wasn't adapted, so I took it a step further and adapted it. I made a fork, made some necessary patches in order to make it work, and did it. It's hacky, but it's working. It does break the NixOS sandbox environment, but what can you do, better than nothing.

So here was the original documentation, at https://github.com/Plippo/asus-wmi-screenpad, check this out:

asus-wmi-screenpad

This repository contains a version of the asus-wmi module with support for brightness control on secondary screens ("ScreenPad Plus") on ASUS Zenbook Duo notebooks. It also adds a few keys from the Zenbook Duo keyboard (Camera, /A, screen switch, toggle ScreenPad) so they can be mapped in your desktop environment.

To install and use this module using dkms:

    Please make sure that you are running the kernel that you want to install the module for. So if you did a kernel update, please reboot first so the installation uses the correct kernel version.

    Install DKMS using the method of your distribution. Debian/Ubuntu/etc.: sudo apt install dkms In addition to that, you need to have the headers for your current kernels installed. Most distributions provide a package for that. E.g. Ubuntu: sudo apt install linux-headers-5.4.0-37 (replace by the correct version as determined by uname -r)

    Create a directory for the module and download the source code

    sudo mkdir /usr/src/asus-wmi-1.0
    cd /usr/src/asus-wmi-1.0
    sudo wget 'https://github.com/Plippo/asus-wmi-screenpad/archive/master.zip'
    sudo unzip master.zip
    sudo mv asus-wmi-screenpad-master/* .
    sudo rmdir asus-wmi-screenpad-master
    sudo rm master.zip

    Now the source code should be in /usr/src/asus-wmi-1.0. It's important that the folder is called exactly like that because DKMS expects that. Alternatively you can of course also clone this git repository into that folder.

    If not using kernel 5.4: Call the following script to download and patch files fitting to your kernel version

    sudo sh prepare-for-current-kernel.sh

    Register the module with DKMS

    sudo dkms add -m asus-wmi -v 1.0

    Build and install the module to the current kernel

    sudo dkms build -m asus-wmi -v 1.0
    sudo dkms install -m asus-wmi -v 1.0

    From now on, DKMS will automatically rebuild the module on every kernel update.

    After rebooting, you should now find a new device in /sys/class/leds/asus::screenpad. To set the brightness of the screen, simply call

    echo XXX | sudo tee '/sys/class/leds/asus::screenpad/brightness'

    where XXX is a value between 0 and 255 (0 turns the screen completely off, 255 sets it to maximum brightness.
    To allow every user to set the brightness without using sudo, call

    sudo chmod a+w '/sys/class/leds/asus::screenpad/brightness'

    Now you can set the brightness by simply executing

    echo XXX > '/sys/class/leds/asus::screenpad/brightness'

    chmod has to be executed again after every reboot, so it is advisable to add the call to a boot script, e.g. /etc/rc.local.
    or create a udev rule to set the permissions:
    sudo nano /etc/udev/rules.d/99-asus.rules

     # rules for asus_nb_wmi devices

     # make screenpad backlight brightness write-able by everyone
     ACTION=="add", SUBSYSTEM=="leds", KERNEL=="asus::screenpad", RUN+="/bin/chmod a+w /sys/class/leds/%k/brightness"

    You can now also use the functionality of your Desktop Environment to map the function keys on the keyboard to actions of your choice. For example, you can create a script that toggles the state of the screenpad and map it to the "Toggle ScreenPad" key.

Troubleshooting
New kernel version

If you keep updating your kernel for a while, it might happen that te downloaded and patched module no longer fits your kernel version and the dkms build fails. In this case, it often helps to clean and reinstall everything as described in the section Removing or reinstalling below.
Kernel module conflicts

On some kernels, it might happen that the built-in module overrides our compiled module. In this case, it might help to execute the following code afterwards:

cd /lib/modules/YOURKERNELVERSION/kernel/drivers/platform/x86
sudo mv  asus-nb-wmi.ko asus-nb-wmi.ko_bak
sudo mv asus-wmi.ko asus-wmi.ko_bak
sudo ln -s ../../../../extra/asus-nb-wmi.ko ./
sudo ln -s ../../../../extra/asus-wmi.ko ./
sudo depmod -a

For some newer system(EG:linuxmint 22 with kernel 6.2),it might help to execute the following code afterwards:

cd /lib/modules/YOURKERNELVERSION/kernel/drivers/platform/x86
sudo mv asus-nb-wmi.ko asus-nb-wmi.ko_bak
sudo mv asus-wmi.ko asus-wmi.ko_bak
sudo ln -s ../../../../updates/dkms/asus-nb-wmi.ko ./
sudo ln -s ../../../../updates/dkms/asus-wmi.ko ./
sudo depmod -a

on newer Ubuntu versions it can happen that the mfd_aaeon kernel module is interfering. it is only needed for asus embedded boards - more details in #issues/32 so we can safely blacklist:

echo "blacklist mfd_aaeon" | sudo tee /etc/modprobe.d/aaeon-blacklist.conf
sudo update-initramfs -k all -u

then rebuild as above.
Removing or reinstalling

If you want to re-download and reinstall the kernel module (maybe because there have been changes in the code), you have to remove the old one first, calling

sudo dkms remove -m asus-wmi -v 1.0 --all
sudo rm -r /usr/src/asus-wmi-1.0

Then repeat the steps above from step 2 on.
Major kernel updates

After a major kernel update (e.g. from 5.8 to 5.10), DKMS cannot update the module automatically as the new kernel sources need to be downloaded and patched. In this case, please uninstall and reinstall the module as described above in the section Removing or reinstalling.



So, here is my adaption:

asus-wmi-screenpad.nix
{ stdenv, fetchzip, fetchurl, kernel, lib, unzip, wget }:

stdenv.mkDerivation rec {
  pname = "asus-wmi-screenpad";
  version = "1.0"; 

  src = fetchzip {
    url = "https://github.com/joyfulcat/asus-wmi-screenpad/archive/master.zip";
    sha256 = "sha256-owy7giOtHNW7htxIZ3kByWzYJeQdu/fjkQF7jN2rlmg=";
  };

  nativeBuildInputs = [ kernel unzip wget ];

  __noChroot = true;

  patchPhase = ''
    # Only run if your kernel version requires it
    sh prepare-for-current-kernel.sh
  '';

  buildPhase = ''
    make -C ${kernel.dev}/lib/modules/${kernel.modDirVersion}/build M=$PWD
  '';

  installPhase = ''
    mkdir -p $out/lib/modules/${kernel.modDirVersion}/extra
    cp asus-wmi.ko $out/lib/modules/${kernel.modDirVersion}/extra/
    cp asus-nb-wmi.ko $out/lib/modules/${kernel.modDirVersion}/extra/
  '';

  postInstall = ''
    # Instructions for setting device permissions and usage
    # This will need to be handled outside the Nix build, perhaps with udev rules or manual steps
    echo "Remember to set permissions and manage device interaction as needed."
  '';

  meta = with lib; {
    description = "Asus WMI Driver for Screenpad";
    homepage = "https://github.com/joyfulcat/asus-wmi-screenpad";
    license = licenses.gpl2;
    maintainers = with maintainers; [ ]; # Add your maintainer here
  };
}

configuration.nix
let
  asusWmiScreenpad = config.boot.kernelPackages.callPackage ./asus-wmi-screenpad.nix { };
in
{


boot.extraModulePackages = [ asusWmiScreenpad ];
boot.kernelModules = [ "asus_wmi_screenpad" ];

nixpkgs.config = {
  nix.useSandbox = false;  
};

 # enable changing brightness without giving permission everytime after reboot
  services.udev.extraRules = ''
    ACTION=="add", SUBSYSTEM=="leds", KERNEL=="asus::screenpad", RUN+="${pkgs.coreutils}/bin/chmod a+w /sys/class/leds/%k/brightness"
  '';
}

Now, the thing is, I wrote some documentation but it's lacking, check it out as well:

An adaptation of the asus-wmi-screenpad kernel module to a nix derivation. This is not a fully contained module, and not meeting the nix standard entirely as it is not gonna run sandboxed and without prefetching the needed resources in `prepare-for-current-kernel.sh`, subsequently having to be run with `--option sandbox false`.


### Steps to run:

1. Clone the repository or copy `asus-wmi-screenpad.nix` directly and save it in `/etc/nixos/`

2. Include the kernel module (depending on the name) inside your `configuration.nix` file

3. Prefetch the needed patch depending on kernel from `prepare-for-current-kernel.sh` using `curl`

4. Run `sudo nixos-rebuild switch --option sandbox false`


If you encounter any problems, feel free to open an issue, as this is by no means a production level module. Also, feel free to contribute in order to make this up to the nix standard in its entirety.


I was wondering if you could help me figure out, firstly and before anything else, if there is anything redundant in my approach. Perhaps I've left some bits and pieces that should not be there anymore or something. And after that we can take a look into how to make docs better, and perhaps in the end making this a fully sandboxed nix module that could be added to nixpkgs. But fornow, focus on the first.h
